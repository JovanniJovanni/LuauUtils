"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[602],{89654:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new memoized function, can also be created by calling the class itself.\\n\\nRecursive functions must use the this differently compared to normal functions.\\n```lua\\n\\tlocal Memoize = require(\\"Memoize\\")\\n\\n\\t--- Recursive impementation of fibonacci sequence:\\n\\n\\tlocal function fib(n : number) : number\\n\\t\\tif n < 2 then\\n\\t\\t\\treturn n\\n\\t\\telse\\n\\t\\t\\treturn fib(n - 1) + fib(n - 2)\\n\\t\\tend\\n\\tend\\n\\n\\tfib = Memoize(fib)\\n\\n\\t--- Normal impementation of fibonacci sequence:\\n\\n\\tlocal fib = Memoize(function(n : number) : number\\n\\t\\tlocal x, y, z = 0, 1, 1\\n\\t\\tfor i = 2, n do\\n\\t\\t\\tx = y\\n\\t\\t\\ty = z\\n\\t\\t\\tz = x + y\\n\\t\\tend\\n\\tend)\\n```","params":[{"name":"callbackFn","desc":"","lua_type":"(K) -> V"}],"returns":[{"desc":"","lua_type":"(K) -> V"}],"function_type":"static","errors":[{"lua_type":"\\"Memoize callback function must have one parameter.\\"","desc":"Memoize will error is the returned function is called with more than one parameter."}],"source":{"line":44,"path":"src/Memoize.lua"}}],"properties":[],"types":[],"name":"Memoize","desc":"","source":{"line":4,"path":"src/Memoize.lua"}}')}}]);