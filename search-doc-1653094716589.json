[{"title":"intro","type":0,"sectionRef":"#","url":"docs/intro","content":"intro","keywords":""},{"title":"Memoize","type":0,"sectionRef":"#","url":"api/Memoize","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Memoize","url":"api/Memoize#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Memoize","url":"api/Memoize#new","content":"&lt;/&gt; Memoize.new(callbackFn: (K) → V) → (K) → V Creates a new memoized function, can also be created by calling the class itself. Recursive functions must use the this differently compared to normal functions. local Memoize = require(&quot;Memoize&quot;) --- Recursive impementation of fibonacci sequence: local function fib(n : number) : number if n &lt; 2 then return n else return fib(n - 1) + fib(n - 2) end end fib = Memoize(fib) --- Normal impementation of fibonacci sequence: local fib = Memoize(function(n : number) : number local x, y, z = 0, 1, 1 for i = 2, n do x = y y = z z = x + y end end)  "},{"title":"Errors","type":1,"pageTitle":"Memoize","url":"api/Memoize##","content":"Type\tDescription&quot;Memoize callback function must have one parameter.&quot;\tMemoize will error is the returned function is called with more than one parameter. "},{"title":"Iterators","type":0,"sectionRef":"#","url":"api/Iterators","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Iterators","url":"api/Iterators#types","content":" "},{"title":"Iterator<T...>​","type":1,"pageTitle":"Iterators","url":"api/Iterators#Iterator<T...>","content":"&lt;/&gt; type Iterator&lt;T...&gt; = () → (T...)?  "},{"title":"Functions​","type":1,"pageTitle":"Iterators","url":"api/Iterators#functions","content":" "},{"title":"range​","type":1,"pageTitle":"Iterators","url":"api/Iterators#range","content":"&lt;/&gt; Iterators.range( min: number, max: number, step: number?=1 ) → Iterator&lt;number?&gt; \tfor i = min, max, step do end -- Is equivalent to: for i in Iterators.range(min, max, step) do end   "},{"title":"map​","type":1,"pageTitle":"Iterators","url":"api/Iterators#map","content":"&lt;/&gt; Iterators.map( arr: {T}, callbackFn: ( T, K... ) → V, ...: K... ) → Iterator&lt;V&gt; Returns an iterator that applies callbackFn to each element of arr. Additional parameters will be passed to callbackFn. local arr = {1, 2, 3} local sum = 0 for i in Iterators.map(arr, function(i) sum += i end) print(sum) -- Output: -- 1 -- 3 -- 6   "},{"title":"zip​","type":1,"pageTitle":"Iterators","url":"api/Iterators#zip","content":"&lt;/&gt; Iterators.zip( arr1: {T}, arr2: {V} ) → Iterator&lt;T,V&gt; Returns an iterator that returns each element of the arrays in parallel. local arr1 = {1, 2, 3} local arr2 = {4, 5, 6} for i, j in Iterators.zip(arr1, arr2) do print(i, j) end -- Output: -- 1 4 -- 2 5 -- 3 6  "},{"title":"ColorUtils","type":0,"sectionRef":"#","url":"api/ColorUtils","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ColorUtils","url":"api/ColorUtils#types","content":" "},{"title":"HSV​","type":1,"pageTitle":"ColorUtils","url":"api/ColorUtils#HSV","content":"&lt;/&gt; interface HSV { h: number s: number v: number }   "},{"title":"HSV​","type":1,"pageTitle":"ColorUtils","url":"api/ColorUtils#HSV","content":"&lt;/&gt; interface HSV { r: number g: number b: number }  "},{"title":"Functions​","type":1,"pageTitle":"ColorUtils","url":"api/ColorUtils#functions","content":" "},{"title":"RBGtoHSV​","type":1,"pageTitle":"ColorUtils","url":"api/ColorUtils#RBGtoHSV","content":"&lt;/&gt; ColorUtils.RBGtoHSV(rgb: RGB) → HSV Converts an RGB color to HSV.  "},{"title":"HSVtoRGB​","type":1,"pageTitle":"ColorUtils","url":"api/ColorUtils#HSVtoRGB","content":"&lt;/&gt; ColorUtils.HSVtoRGB(hsv: HSV) → RGB Converts an HSV color to RGB. "},{"title":"Stack","type":0,"sectionRef":"#","url":"api/Stack","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Stack","url":"api/Stack#types","content":" "},{"title":"Type<T>​","type":1,"pageTitle":"Stack","url":"api/Stack#Type<T>","content":"&lt;/&gt; type Type&lt;T&gt; = { [number]: T, @metatable: Stack }  "},{"title":"Functions​","type":1,"pageTitle":"Stack","url":"api/Stack#functions","content":" "},{"title":"Is​","type":1,"pageTitle":"Stack","url":"api/Stack#Is","content":"&lt;/&gt; Stack.Is(object: any) → boolean Returns true if the object is a Stack  "},{"title":"new​","type":1,"pageTitle":"Stack","url":"api/Stack#new","content":"&lt;/&gt; Stack.new( ...: T-- Items already in the stack ) → () Creates a new stack object.  "},{"title":"peak​","type":1,"pageTitle":"Stack","url":"api/Stack#peak","content":"&lt;/&gt; Stack:peak() → T-- The item at the top of the stack Returns the item at the top of the stack without removing it.  "},{"title":"pop​","type":1,"pageTitle":"Stack","url":"api/Stack#pop","content":"&lt;/&gt; Stack:pop() → T-- The item at the top of the stack Removes the item at the top of the stack and returns it.  "},{"title":"push​","type":1,"pageTitle":"Stack","url":"api/Stack#push","content":"&lt;/&gt; Stack:push( value: T-- The item to add to the stack ) → number-- The new size of the stack Adds a new item to the top of the stack and returns the new size. "},{"title":"WeightedRandom","type":0,"sectionRef":"#","url":"api/WeightedRandom","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#types","content":" "},{"title":"Item<T>​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#Item<T>","content":"&lt;/&gt; interface Item&lt;T&gt; { Weight: : number-- The weight of an item Value: : T-- The value to be returned when using :GetItem() }  "},{"title":"Properties​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#properties","content":" "},{"title":"Items​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#Items","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; WeightedRandom.Items: Array&lt;Item&lt;T&gt;&gt; A list of all items inside a weighted random object.  "},{"title":"Weight​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#Weight","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; WeightedRandom.Weight: number The total weight of all items in a weighted random object. "},{"title":"Functions​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#functions","content":" "},{"title":"Is​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#Is","content":"&lt;/&gt; WeightedRandom.Is(object: any) → boolean Returns true if the object is a WeightedRandom  "},{"title":"new​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#new","content":"&lt;/&gt; WeightedRandom.new( Objects: Array&lt;Item&lt;T&gt;&gt;, seed: number? ) → Type&lt;T&gt; "},{"title":"Types","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom##","content":""},{"title":"​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#Type<T>","content":"interface Type&lt;T&gt; { Items: Array&lt;Item&lt;T&gt;&gt; Weight: number }  Create a new WeightedRandom object from Array&lt;Item&gt; Objects.  "},{"title":"getItem​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#getItem","content":"&lt;/&gt; WeightedRandom:getItem() → T Returns a random item's Value from the object's Items property.  "},{"title":"getItems​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#getItems","content":"&lt;/&gt; WeightedRandom:getItems() → Array&lt;Item&lt;T&gt;&gt; A weighted random object's Items property.  "},{"title":"getWeight​","type":1,"pageTitle":"WeightedRandom","url":"api/WeightedRandom#getWeight","content":"&lt;/&gt; WeightedRandom:getWeight() → number A weighted random object's Weight property. "},{"title":"Symbol","type":0,"sectionRef":"#","url":"api/Symbol","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Symbol","url":"api/Symbol#types","content":" "},{"title":"Type​","type":1,"pageTitle":"Symbol","url":"api/Symbol#Type","content":"&lt;/&gt; type Type = {@metatable: Symbol}  "},{"title":"Functions​","type":1,"pageTitle":"Symbol","url":"api/Symbol#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Symbol","url":"api/Symbol#new","content":"&lt;/&gt; Symbol.new(name: string) → () Creates a new Symbol, can also be called by using Symbol(&quot;foo&quot;)  "},{"title":"Is​","type":1,"pageTitle":"Symbol","url":"api/Symbol#Is","content":"&lt;/&gt; Symbol.Is(object: any) → boolean Returns true if the object is a Symbol "},{"title":"Queue","type":0,"sectionRef":"#","url":"api/Queue","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Queue","url":"api/Queue#functions","content":" "},{"title":"Is​","type":1,"pageTitle":"Queue","url":"api/Queue#Is","content":"&lt;/&gt; Queue.Is(object: any) → boolean Returns true if the object is a Queue  "},{"title":"new​","type":1,"pageTitle":"Queue","url":"api/Queue#new","content":"&lt;/&gt; Queue.new( ...: T-- Items already in the queue ) → Type&lt;T&gt; "},{"title":"Types","type":1,"pageTitle":"Queue","url":"api/Queue##","content":""},{"title":"​","type":1,"pageTitle":"Queue","url":"api/Queue#Type<T>","content":"type Type&lt;T&gt; = { [number]: T, @metatable: Queue }  Creates a new queue.  "},{"title":"enqueue​","type":1,"pageTitle":"Queue","url":"api/Queue#enqueue","content":"&lt;/&gt; Queue:enqueue( value: T-- The item to add to the queue ) → number-- The new size of the queue Adds a new item to the end of the queue and returns the new size.  "},{"title":"dequeue​","type":1,"pageTitle":"Queue","url":"api/Queue#dequeue","content":"&lt;/&gt; Queue:dequeue() → T-- Item removed from the front of the queue Removes the first item from the queue and returns it. "},{"title":"Thread","type":0,"sectionRef":"#","url":"api/Thread","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Thread","url":"api/Thread#types","content":" "},{"title":"Type​","type":1,"pageTitle":"Thread","url":"api/Thread#Type","content":"&lt;/&gt; type Type = { _coroutine: thread, @metatable: Thread }  "},{"title":"Functions​","type":1,"pageTitle":"Thread","url":"api/Thread#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Thread","url":"api/Thread#new","content":"&lt;/&gt; Thread.new(callbackFn: functoin) → Type Creates a new thread from a function.  "},{"title":"from​","type":1,"pageTitle":"Thread","url":"api/Thread#from","content":"&lt;/&gt; Thread.from(thread: thread) → Type Creates a thread from a thread gotten from coroutine.running().  "},{"title":"resume​","type":1,"pageTitle":"Thread","url":"api/Thread#resume","content":"&lt;/&gt; Thread:resume(...: any) → () Resumes the thread and returns true if the thread is still running.  "},{"title":"getStatus​","type":1,"pageTitle":"Thread","url":"api/Thread#getStatus","content":"&lt;/&gt; Thread:getStatus() → &quot;dead&quot; | &quot;running&quot; | &quot;suspended&quot; | &quot;normal&quot; Returns the thread's status.  "},{"title":"close​","type":1,"pageTitle":"Thread","url":"api/Thread#close","content":"&lt;/&gt; Thread:close() → () Closes the thread "},{"title":"Math","type":0,"sectionRef":"#","url":"api/Math","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Math","url":"api/Math#properties","content":" "},{"title":"e​","type":1,"pageTitle":"Math","url":"api/Math#e","content":"&lt;/&gt; Math.e: number Euler's Number to the eigth decimal place (2.71828183) "},{"title":"Functions​","type":1,"pageTitle":"Math","url":"api/Math#functions","content":" "},{"title":"cot​","type":1,"pageTitle":"Math","url":"api/Math#cot","content":"&lt;/&gt; Math.cot(x: number) → number Returns the cotangent of x.  "},{"title":"coth​","type":1,"pageTitle":"Math","url":"api/Math#coth","content":"&lt;/&gt; Math.coth(x: number) → number Returns the hyperbolic cotangent of x.  "},{"title":"csc​","type":1,"pageTitle":"Math","url":"api/Math#csc","content":"&lt;/&gt; Math.csc(x: number) → number Returns the cosecant of x.  "},{"title":"csch​","type":1,"pageTitle":"Math","url":"api/Math#csch","content":"&lt;/&gt; Math.csch(x: number) → number Returns the hyperbolic cosecant of x.  "},{"title":"factorial​","type":1,"pageTitle":"Math","url":"api/Math#factorial","content":"&lt;/&gt; Math.factorial(n: number) → number Returns the factorial of n.  "},{"title":"mean​","type":1,"pageTitle":"Math","url":"api/Math#mean","content":"&lt;/&gt; Math.mean(...: number) → number Returns the mean of the given numbers.  "},{"title":"median​","type":1,"pageTitle":"Math","url":"api/Math#median","content":"&lt;/&gt; Math.median(...: number) → number Returns the median of the given numbers.  "},{"title":"nCr​","type":1,"pageTitle":"Math","url":"api/Math#nCr","content":"&lt;/&gt; Math.nCr( n: number, r: number ) → number   "},{"title":"nPr​","type":1,"pageTitle":"Math","url":"api/Math#nPr","content":"&lt;/&gt; Math.nPr( n: number, r: number ) → number   "},{"title":"root​","type":1,"pageTitle":"Math","url":"api/Math#root","content":"&lt;/&gt; Math.root( radicand: number, index: number ) → number Returns the nth root of radicand. Equivalent to radicand ^ (1 / index).  "},{"title":"sec​","type":1,"pageTitle":"Math","url":"api/Math#sec","content":"&lt;/&gt; Math.sec(x: number) → number Returns the secant of x.  "},{"title":"sech​","type":1,"pageTitle":"Math","url":"api/Math#sech","content":"&lt;/&gt; Math.sech(x: number) → number Returns the hyperbolic secant of x.  "},{"title":"summation​","type":1,"pageTitle":"Math","url":"api/Math#summation","content":"&lt;/&gt; Math.summation( i: number,-- index of summation n: number,-- upper limit of summation callbackFn: ( index: number, last: number ) → number-- function to call for each iteration ) → number Returns the summation of the function callbackFn(index, last) from i to n.  "},{"title":"trunc​","type":1,"pageTitle":"Math","url":"api/Math#trunc","content":"&lt;/&gt; Math.trunc(x: number) → number Removes the decimal places of x. "}]